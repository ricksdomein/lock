#!/bin/bash

#Constants
DISPLAY_RE="([0-9]+)x([0-9]+)\\+([0-9]+)\\+([0-9]+)" # Regex to find display dimensions
CACHE_FOLDER="$HOME"/.cache/lock/img/                # Cache folder
font=$(convert -list font | awk "{ a[NR] = \$2 } /family: $(fc-match sans -f "%{family}\n")/ { print a[NR-1]; exit }")
text="Type password to unlock"
if ! [ -e $CACHE_FOLDER ]; then
	mkdir -p $CACHE_FOLDER
fi

#Passed arguments
while getopts ":i:a:f:t:" opt; do
	case $opt in
	i)
		arg_image="$OPTARG"
		;;
	a)
		lock_args="$OPTARG"
		;;
	f)
		font="$OPTARG"
		;;
	t)
		text="$OPTARG"
		;;
	\?)
		echo "Invalid option -$OPTARG" >&2 && exit 1
		;;
	esac
done

#Image paths
if [ "$arg_image" ]; then
	BKG_IMG="$arg_image" # Passed image
#elif [ -f "/usr/share/lock/img/background.png" ]; then
#	BKG_IMG="/usr/share/lock/img/background.png" # Default image
#else
#	BKG_IMG="$(dirname "$BASH_SOURCE")/img/background.png" # Fallback to current folder
fi

if ! [ -e "$BKG_IMG" ]; then
	echo "No background image! Exiting..."
	exit 2
fi

MD5_BKG_IMG=$(md5sum $BKG_IMG | cut -c 1-10)
MD5_SCREEN_CONFIG=$(xrandr | md5sum - | cut -c 1-32)              # Hash of xrandr output
OUTPUT_IMG="$CACHE_FOLDER""$MD5_SCREEN_CONFIG"."$MD5_BKG_IMG".png # Path of final image
OUTPUT_IMG_WIDTH=0                                                # Decide size to cover all screens
OUTPUT_IMG_HEIGHT=0                                               # Decide size to cover all screens

#i3lock command
LOCK_BASE_CMD="i3lock -i $OUTPUT_IMG"
if [ "$lock_args" ]; then
	LOCK_ARGS="$lock_args" # Passed command
else
	LOCK_ARGS="-t -e" # Default
fi
LOCK_CMD="$LOCK_BASE_CMD $LOCK_ARGS"

color=$(convert "$OUTPUT_IMG" -gravity SouthWest -crop 100x100+0+0 +repage -colorspace hsb \
	-resize 1x1 txt:- | awk -F '[%$]' 'NR==2{gsub(",",""); printf "%.0f\n", $(NF-1)}')
if [[ $color -gt 60 ]]; then #white background image and black text
	bw="black"
	icon="/usr/share/lock/icons/circlelockdark.png"
	param=("--insidecolor=0000001c" "--ringcolor=0000003e"
		"--linecolor=00000000" "--keyhlcolor=ffffff80" "--ringvercolor=ffffff00"
		"--separatorcolor=22222260" "--insidevercolor=ffffff1c"
		"--ringwrongcolor=ffffff55" "--insidewrongcolor=ffffff1c"
		"--verifcolor=ffffff00" "--wrongcolor=ff000000" "--timecolor=ffffff00"
		"--datecolor=ffffff00" "--layoutcolor=ffffff00"
		"--indpos=x+65:h-68" "--radius=20" "--ring-width=4")
else #black
	bw="white"
	icon="/usr/share/lock/icons/circlelock.png"
	param=("--insidecolor=ffffff1c" "--ringcolor=ffffff3e"
		"--linecolor=ffffff00" "--keyhlcolor=00000080" "--ringvercolor=00000000"
		"--separatorcolor=22222260" "--insidevercolor=0000001c"
		"--ringwrongcolor=00000055" "--insidewrongcolor=0000001c"
		"--verifcolor=00000000" "--wrongcolor=ff000000" "--timecolor=00000000"
		"--datecolor=00000000" "--layoutcolor=00000000"
		"--indpos=x+65:h-68" "--radius=20" "--ring-width=4")
fi


if [ -e $OUTPUT_IMG ]; then
	# Lock screen since image already exists
	$LOCK_CMD ${param[@]}
	exit 0
fi

#Execute xrandr to get information about the monitors:
while read LINE; do
	#If we are reading the line that contains the position information:
	if [[ $LINE =~ $DISPLAY_RE ]]; then
		#Extract information and append some parameters to the ones that will be given to ImageMagick:
		SCREEN_WIDTH=${BASH_REMATCH[1]}
		SCREEN_HEIGHT=${BASH_REMATCH[2]}
		SCREEN_X=${BASH_REMATCH[3]}
		SCREEN_Y=${BASH_REMATCH[4]}

		CACHE_IMG="$CACHE_FOLDER""$SCREEN_WIDTH"x"$SCREEN_HEIGHT"."$MD5_BKG_IMG".png
		## if cache for that screensize doesnt exist
		if ! [ -e $CACHE_IMG ]; then
			# Create image for that screensize
			eval convert '$BKG_IMG' '-resize' '${SCREEN_WIDTH}X${SCREEN_HEIGHT}^' '-gravity' 'Center' '-crop' '${SCREEN_WIDTH}X${SCREEN_HEIGHT}+0+0' '+repage' '$CACHE_IMG'
		fi

		# Decide size of output image
		if (($OUTPUT_IMG_WIDTH < $SCREEN_WIDTH + $SCREEN_X)); then OUTPUT_IMG_WIDTH=$(($SCREEN_WIDTH + $SCREEN_X)); fi
		if (($OUTPUT_IMG_HEIGHT < $SCREEN_HEIGHT + $SCREEN_Y)); then OUTPUT_IMG_HEIGHT=$(($SCREEN_HEIGHT + $SCREEN_Y)); fi

		# Add lock text and icon
		convert "$CACHE_IMG" -font "$font" -pointsize 17 -fill "$bw" -gravity SouthWest -annotate +100+58 "$text" "$CACHE_IMG"
		convert "$CACHE_IMG" "$icon" -gravity SouthWest -geometry +45+48 -composite "$CACHE_IMG"

		PARAMS="$PARAMS -type TrueColor $CACHE_IMG -geometry +$SCREEN_X+$SCREEN_Y -composite "
	fi
done <<<"$(xrandr)"

#Execute ImageMagick:
eval convert -size ${OUTPUT_IMG_WIDTH}x${OUTPUT_IMG_HEIGHT} 'xc:black' $OUTPUT_IMG
eval convert $OUTPUT_IMG $PARAMS $OUTPUT_IMG

#Lock the screen:
$LOCK_CMD ${param[@]}
#lockup -f Ubuntu -i $HOME/Pictures/wallpapers/arch.png
